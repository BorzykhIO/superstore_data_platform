version: '2'

x-airflow-common: &airflow-common
  environment:
    &airflow-common-env
    AIRFLOW_CORE_EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW_CORE_FERNET_KEY: ''
    AIRFLOW__CORE_DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW_CORE_LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 5
    _AIRFLOW_DB_MIGRATE: 'true'
    _AIRFLOW_WWW_USER_CREATE: 'true'
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
    DBT_PROFILES_DIR: /dbt

  volumes:
    - ./airflow_folders/dags:/opt/airflow/dags
    - ./airflow_folders/logs:/opt/airflow/logs
    - ./airflow_folders/plugins:/opt/airflow/plugins
    - ./airflow_folders/tmp:/opt/airflow/tmp
    - ./dbt:/dbt
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - all_in_one

services:
  postgres:
    container_name: postgres_airflow
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - postgres_db_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    networks:
      - all_in_one

  af-webserver:
    <<: *airflow-common
    build:
      context: ./airflow_dockerfile
      dockerfile: Dockerfile
    container_name: af-webserver
    environment:
      *airflow-common-env
    command: webserver
    ports:
      - "8080:8080"
    restart: always

  af-scheduler:
    <<: *airflow-common
    build:
      context: ./airflow_dockerfile
      dockerfile: Dockerfile
    container_name: af-scheduler
    environment:
      *airflow-common-env
    command: scheduler
    restart: always

  af-worker:
    <<: *airflow-common
    build:
      context: ./airflow_dockerfile
      dockerfile: Dockerfile
    container_name: af-worker
    environment:
      *airflow-common-env
    command: version
    restart: always

  airflow-init:
    <<: *airflow-common
    build:
      context: ./airflow_dockerfile
      dockerfile: Dockerfile
    container_name: airflow-init
    command: version
    environment:
      <<: *airflow-common-env

  postgres_dwh:
    build:
      context: postgresql_dwh_dockerfile/.
      dockerfile: Dockerfile
    container_name: postgres_dwh
    environment:
      POSTGRES_USER: dwh_user
      POSTGRES_PASSWORD: dwh_pass
      POSTGRES_DB: dwh_db
    ports:
      - "6543:5432"
    volumes:
      - postgres_dwh_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dwh_user"]
      interval: 5s
      retries: 5
    networks:
    - all_in_one

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - all_in_one
    volumes:
      - zookeeper_data:/var/lib/zookeeper

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

    
      KAFKA_LISTENERS: PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT_DOCKER://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT_DOCKER://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_DOCKER


      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1

     
      KAFKA_AUTOCREATE_TOPICS_ENABLE: "true"

    networks:
      - all_in_one
    volumes:
      - ./kafka_data:/var/lib/kafka

  kafka-producer:
    build:
      context: ./kafka_producer_app
      dockerfile: Dockerfile
    container_name: kafka-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: "kafka:29092"
      KAFKA_TOPIC: "test_topic"
    networks:
      - all_in_one

  spark:
    image: bitnami/spark:latest
    container_name: spark
    environment:
      SPARK_MODE: master
    ports:
      - "8081:8080"
    networks:
      - all_in_one


  spark-worker:
    image: bitnami/spark:latest
    container_name: spark_worker
    depends_on:
      - spark
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark:7077 
    networks:
      - all_in_one


  spark-streaming:
    image: bitnami/spark:latest
    container_name: spark_streaming
    depends_on:
      - spark
      - kafka
    environment:
      SPARK_MASTER_URL: spark://spark:7077
    volumes:
      - ./spark_streaming_app:/opt/spark_app
      - ./spark_streaming_app/tmp:/opt/tmp
    command: >
      bin/spark-submit
      --master spark://spark:7077
      --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0,org.postgresql:postgresql:42.3.9
      /opt/spark_app/spark_streaming.py
    networks:
      - all_in_one

  jupyter:
    image: jupyter/pyspark-notebook
    container_name: jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./spark_folders/notebooks:/home/jovyan/work
    environment:
      - SPARK_MASTER=spark://spark:7077
      - PYSPARK_SUBMIT_ARGS=--packages org.apache.hadoop:hadoop-aws:3.3.1,com.amazonaws:aws-java-sdk-bundle:1.11.1026,org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0,org.postgresql:postgresql:42.3.9 pyspark-shell
    networks:
      - all_in_one

networks:
  all_in_one:
    driver: bridge
    name: all_in_one
    
volumes:
  postgres_db_volume:
  postgres_dwh_volume:
  zookeeper_data:
  kafka_data:

